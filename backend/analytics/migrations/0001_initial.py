# Generated by Django 4.2.7 on 2025-08-31 10:14

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AlertMetrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alert_type', models.CharField(max_length=50)),
                ('total_alerts', models.PositiveIntegerField(default=0)),
                ('acknowledged_alerts', models.PositiveIntegerField(default=0)),
                ('resolved_alerts', models.PositiveIntegerField(default=0)),
                ('escalated_alerts', models.PositiveIntegerField(default=0)),
                ('avg_response_time', models.FloatField(default=0.0)),
                ('avg_resolution_time', models.FloatField(default=0.0)),
                ('false_positive_rate', models.FloatField(default=0.0)),
                ('accuracy_rate', models.FloatField(default=0.0)),
                ('users_engaged', models.PositiveIntegerField(default=0)),
                ('avg_user_response_time', models.FloatField(default=0.0)),
                ('analysis_date', models.DateField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Alert Metrics',
                'verbose_name_plural': 'Alert Metrics',
                'ordering': ['-analysis_date', 'alert_type'],
            },
        ),
        migrations.CreateModel(
            name='AnalyticsReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('report_type', models.CharField(choices=[('daily', 'Daily Report'), ('weekly', 'Weekly Report'), ('monthly', 'Monthly Report'), ('quarterly', 'Quarterly Report'), ('annual', 'Annual Report'), ('custom', 'Custom Report')], max_length=20)),
                ('format', models.CharField(choices=[('pdf', 'PDF'), ('excel', 'Excel'), ('csv', 'CSV'), ('json', 'JSON'), ('html', 'HTML')], default='pdf', max_length=10)),
                ('description', models.TextField(blank=True)),
                ('parameters', models.JSONField(default=dict)),
                ('file_path', models.CharField(blank=True, max_length=500)),
                ('file_size', models.PositiveIntegerField(blank=True, null=True)),
                ('content_summary', models.JSONField(blank=True, default=dict)),
                ('generation_started', models.DateTimeField(auto_now_add=True)),
                ('generation_completed', models.DateTimeField(blank=True, null=True)),
                ('generation_status', models.CharField(choices=[('pending', 'Pending'), ('generating', 'Generating'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Analytics Report',
                'verbose_name_plural': 'Analytics Reports',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='GeographicAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country', models.CharField(max_length=100)),
                ('region', models.CharField(blank=True, max_length=100)),
                ('city', models.CharField(blank=True, max_length=100)),
                ('total_detections', models.PositiveIntegerField(default=0)),
                ('unique_users', models.PositiveIntegerField(default=0)),
                ('active_channels', models.PositiveIntegerField(default=0)),
                ('risk_level', models.CharField(choices=[('low', 'Low Risk'), ('medium', 'Medium Risk'), ('high', 'High Risk'), ('critical', 'Critical Risk')], default='low', max_length=20)),
                ('risk_score', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('platform_distribution', models.JSONField(blank=True, default=dict)),
                ('drug_category_distribution', models.JSONField(blank=True, default=dict)),
                ('activity_timeline', models.JSONField(blank=True, default=list)),
                ('analysis_date', models.DateField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Geographic Analysis',
                'verbose_name_plural': 'Geographic Analyses',
                'ordering': ['-total_detections', 'country'],
            },
        ),
        migrations.CreateModel(
            name='PerformanceMetrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(choices=[('system', 'System Performance'), ('detection', 'Detection Performance'), ('monitoring', 'Monitoring Performance'), ('user', 'User Performance'), ('security', 'Security Performance')], max_length=20)),
                ('metric_name', models.CharField(max_length=100)),
                ('current_value', models.FloatField()),
                ('target_value', models.FloatField(blank=True, null=True)),
                ('min_value', models.FloatField(blank=True, null=True)),
                ('max_value', models.FloatField(blank=True, null=True)),
                ('is_healthy', models.BooleanField(default=True)),
                ('performance_score', models.FloatField(default=1.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('historical_values', models.JSONField(blank=True, default=list)),
                ('warning_threshold', models.FloatField(blank=True, null=True)),
                ('critical_threshold', models.FloatField(blank=True, null=True)),
                ('trend', models.CharField(choices=[('improving', 'Improving'), ('stable', 'Stable'), ('declining', 'Declining'), ('critical', 'Critical')], default='stable', max_length=20)),
                ('recorded_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Performance Metric',
                'verbose_name_plural': 'Performance Metrics',
                'ordering': ['category', 'metric_name'],
            },
        ),
        migrations.CreateModel(
            name='TrendAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metric_type', models.CharField(choices=[('detection_rate', 'Detection Rate'), ('platform_activity', 'Platform Activity'), ('drug_category', 'Drug Category Distribution'), ('geographic', 'Geographic Distribution'), ('temporal', 'Temporal Patterns'), ('user_behavior', 'User Behavior')], max_length=30)),
                ('metric_name', models.CharField(max_length=100)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('period_type', models.CharField(choices=[('hourly', 'Hourly'), ('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly')], max_length=20)),
                ('data_points', models.JSONField(default=list)),
                ('trend_direction', models.CharField(choices=[('increasing', 'Increasing'), ('decreasing', 'Decreasing'), ('stable', 'Stable'), ('fluctuating', 'Fluctuating')], max_length=20)),
                ('trend_strength', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('mean_value', models.FloatField()),
                ('median_value', models.FloatField()),
                ('standard_deviation', models.FloatField()),
                ('correlation_coefficient', models.FloatField(blank=True, null=True)),
                ('key_insights', models.JSONField(blank=True, default=list)),
                ('recommendations', models.JSONField(blank=True, default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Trend Analysis',
                'verbose_name_plural': 'Trend Analyses',
                'ordering': ['-end_date', 'metric_type'],
            },
        ),
        migrations.CreateModel(
            name='UserBehaviorAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('behavior_type', models.CharField(choices=[('posting_pattern', 'Posting Pattern'), ('communication_pattern', 'Communication Pattern'), ('content_pattern', 'Content Pattern'), ('temporal_pattern', 'Temporal Pattern'), ('network_pattern', 'Network Pattern')], max_length=30)),
                ('user_id', models.CharField(max_length=255)),
                ('username', models.CharField(blank=True, max_length=255)),
                ('activity_frequency', models.FloatField(default=0.0)),
                ('content_volume', models.PositiveIntegerField(default=0)),
                ('interaction_rate', models.FloatField(default=0.0)),
                ('posting_schedule', models.JSONField(blank=True, default=dict)),
                ('content_themes', models.JSONField(blank=True, default=list)),
                ('language_patterns', models.JSONField(blank=True, default=dict)),
                ('suspicious_activity_count', models.PositiveIntegerField(default=0)),
                ('risk_score', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('connections_count', models.PositiveIntegerField(default=0)),
                ('influence_score', models.FloatField(default=0.0)),
                ('analysis_start', models.DateTimeField()),
                ('analysis_end', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'User Behavior Analysis',
                'verbose_name_plural': 'User Behavior Analyses',
                'ordering': ['-risk_score', '-created_at'],
            },
        ),
    ]
