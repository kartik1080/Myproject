# Generated by Django 4.2.7 on 2025-08-31 10:14

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='DetectionAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(unique=True)),
                ('telegram_detections', models.PositiveIntegerField(default=0)),
                ('instagram_detections', models.PositiveIntegerField(default=0)),
                ('whatsapp_detections', models.PositiveIntegerField(default=0)),
                ('twitter_detections', models.PositiveIntegerField(default=0)),
                ('other_detections', models.PositiveIntegerField(default=0)),
                ('low_severity', models.PositiveIntegerField(default=0)),
                ('medium_severity', models.PositiveIntegerField(default=0)),
                ('high_severity', models.PositiveIntegerField(default=0)),
                ('critical_severity', models.PositiveIntegerField(default=0)),
                ('pending_review', models.PositiveIntegerField(default=0)),
                ('confirmed', models.PositiveIntegerField(default=0)),
                ('false_positives', models.PositiveIntegerField(default=0)),
                ('escalated', models.PositiveIntegerField(default=0)),
                ('avg_confidence_score', models.FloatField(default=0.0)),
                ('detection_rate', models.FloatField(default=0.0)),
                ('false_positive_rate', models.FloatField(default=0.0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Detection Analytics',
                'verbose_name_plural': 'Detection Analytics',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='DetectionPattern',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('pattern_type', models.CharField(choices=[('keyword', 'Keyword Match'), ('regex', 'Regular Expression'), ('ml_model', 'Machine Learning Model'), ('behavioral', 'Behavioral Pattern'), ('metadata', 'Metadata Analysis')], max_length=20)),
                ('pattern_data', models.TextField()),
                ('description', models.TextField(blank=True)),
                ('confidence_threshold', models.FloatField(default=0.7, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('is_active', models.BooleanField(default=True)),
                ('priority', models.PositiveIntegerField(default=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_used', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Detection Pattern',
                'verbose_name_plural': 'Detection Patterns',
                'ordering': ['-priority', 'name'],
            },
        ),
        migrations.CreateModel(
            name='DetectionResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_text', models.TextField()),
                ('content_url', models.URLField(blank=True)),
                ('content_id', models.CharField(blank=True, max_length=255)),
                ('user_id', models.CharField(blank=True, max_length=255)),
                ('username', models.CharField(blank=True, max_length=255)),
                ('user_metadata', models.JSONField(blank=True, default=dict)),
                ('confidence_score', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('severity_level', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], max_length=20)),
                ('detected_keywords', models.JSONField(blank=True, default=list)),
                ('ml_predictions', models.JSONField(blank=True, default=dict)),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('reviewed', 'Reviewed'), ('confirmed', 'Confirmed'), ('false_positive', 'False Positive'), ('escalated', 'Escalated'), ('resolved', 'Resolved')], default='pending', max_length=20)),
                ('location_data', models.JSONField(blank=True, default=dict)),
                ('device_info', models.JSONField(blank=True, default=dict)),
                ('ip_addresses', models.JSONField(blank=True, default=list)),
                ('detected_at', models.DateTimeField(auto_now_add=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Detection Result',
                'verbose_name_plural': 'Detection Results',
                'ordering': ['-detected_at'],
            },
        ),
        migrations.CreateModel(
            name='DetectionRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('rule_type', models.CharField(choices=[('auto_assign', 'Auto Assignment'), ('auto_escalate', 'Auto Escalation'), ('notification', 'Notification'), ('blocking', 'Content Blocking'), ('reporting', 'Auto Reporting')], max_length=20)),
                ('description', models.TextField(blank=True)),
                ('conditions', models.JSONField(default=dict)),
                ('actions', models.JSONField(default=dict)),
                ('is_active', models.BooleanField(default=True)),
                ('priority', models.PositiveIntegerField(default=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_executed', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Detection Rule',
                'verbose_name_plural': 'Detection Rules',
                'ordering': ['-priority', 'name'],
            },
        ),
        migrations.CreateModel(
            name='DrugCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('risk_level', models.CharField(choices=[('low', 'Low Risk'), ('medium', 'Medium Risk'), ('high', 'High Risk'), ('critical', 'Critical Risk')], default='medium', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Drug Category',
                'verbose_name_plural': 'Drug Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Platform',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('platform_type', models.CharField(choices=[('telegram', 'Telegram'), ('instagram', 'Instagram'), ('whatsapp', 'WhatsApp'), ('twitter', 'Twitter'), ('facebook', 'Facebook'), ('discord', 'Discord'), ('signal', 'Signal'), ('other', 'Other')], max_length=20)),
                ('api_endpoint', models.URLField(blank=True)),
                ('api_key', models.CharField(blank=True, max_length=255)),
                ('api_secret', models.CharField(blank=True, max_length=255)),
                ('is_active', models.BooleanField(default=True)),
                ('monitoring_enabled', models.BooleanField(default=True)),
                ('rate_limit', models.PositiveIntegerField(default=100)),
                ('total_detections', models.PositiveIntegerField(default=0)),
                ('last_monitoring', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Platform',
                'verbose_name_plural': 'Platforms',
                'ordering': ['name'],
            },
        ),
    ]
